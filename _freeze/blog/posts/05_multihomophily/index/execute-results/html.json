{
  "hash": "9b5599628fdf5ede6383d081c12e250a",
  "result": {
    "markdown": "---\ndate: 2022-10-26\ntitle: Homophily\nsubtitle: Is everywhere!\nauthor: Roberto Cantillan\nsummary: |\n    In this post I focus on analyzing homophily in a multidimensional way using the `ergm.ego` library, from the `statnet` group. For this I use the data from the Longitudinal Social Study of Chile (ELSOC).\ncategories:\n  - R\n  - Networks\n  - Ego networks\n  - ERGM ego\n  - Homophily\ntitle-block-banner: featured.jpg\ntitle-block-banner-color: \"rgba(0,38,66,0.75)\"\ntitle-block-style: default\n---\n\n\n\n\n## libraries\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  ergm,\n  ergm.ego,\n  car,\n  egor,\n  tidyverse,\n  tibble,\n  texreg,\n  purrr,\n  tidyr,\n  prioritizr,\n  questionr,\n  Rglpk)\n```\n:::\n\n\n## data\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"/home/rober/Documents/rcantillan.github.io/dat/ELSOC/ELSOC_W02_v3.00_R.RData\")\nload(\"/home/rober/Documents/rcantillan.github.io/dat/ELSOC/ELSOC_W04_v2.01_R.RData\")\nload(\"/home/rober/Documents/rcantillan.github.io/dat/ELSOC/ELSOC_W01_v4.01_R.RData\")\n```\n:::\n\n\n\n## Procesamiento \n### Renombrar ID\n\n::: {.cell}\n\n```{.r .cell-code}\na<-elsoc_2017 %>% dplyr::rename(.egoID = idencuesta)\n```\n:::\n\n\n### Crear data frame alteris para 2017=a\n\nCreamos subset con data de cada uno de los alteris mencionados, manteniendo el ID de cada ego en el cual están anidados. Las columnas de cada uno de los subset deben tener los mismos nombres. \n\n::: {.cell}\n\n```{.r .cell-code}\ncolumnas <- c(\"sexo\", \"edad\", \"educ\", \"relig\", \"ideol\", \"barrio\", \"relacion\")\nnum_alters <- 5\n\nalter_list <- list()\n\nfor (i in 1:num_alters) {\n  alter_cols <- paste0(\"r13_\", columnas, \"_\", sprintf(\"%02d\", i))\n  alter <- a %>%\n    dplyr::select(.egoID, all_of(alter_cols)) %>%\n    rename_with(~ columnas, alter_cols) %>%\n    mutate(n = i)\n  \n  alter_list[[i]] <- alter\n}\n\nalteris <- bind_rows(alter_list)\nalteris<-arrange(alteris, .egoID)\n```\n:::\n\n\n\n### Crear vector alter id\n\nEn el siguiente chunk creamos un vector identificador para cada uno de los alteris presentes en la data \"alteris\". Lo identificamos como objeto `tibble` y eliminamos el vector \"n\". \n\n::: {.cell}\n\n```{.r .cell-code}\nalteris   <- rowid_to_column(alteris, var = \".alterID\")\nalteris   <- as_tibble(alteris)\nalteris$n <- NULL\n```\n:::\n\n\n### Recod alteris\n\nRecodificamos los valores de los atributos de los alteris. \n\n::: {.cell}\n\n```{.r .cell-code}\n# NA\nalteris[alteris==\"-999\"]<-NA\nalteris[alteris==\"-888\"]<-NA\n\n# Educación \n#edulab<-c('ltsecondary', 'secondary', 'technicaled', 'collegeed')\nalteris$educ <-factor(Recode(alteris$educ ,\"1=1;2:3=2;4=3;5=4\"))\ntable(alteris$educ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4 \n1362 3543 1042 1719 \n```\n:::\n\n```{.r .cell-code}\n# Religión \n#relilab<-c('catholic','evangelical','other','none')\nalteris$relig<-factor(Recode(alteris$relig,\"1=1;2=2;3:4=4;5=3\"))\ntable(alteris$relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4 \n4907 1407  373 1379 \n```\n:::\n\n```{.r .cell-code}\n# Ideología \n#ideolab<-c('rightwinger','centerright','center','centerleft','leftwinger','none')\nalteris$ideol<-factor(Recode(alteris$ideol,\"1=1;2=2;3=3;4=4;5=5;6=6\"))\ntable(alteris$ideol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4    5    6 \n 786  191  382  303  759 4644 \n```\n:::\n\n```{.r .cell-code}\n# Edad \nalteris$edad<-as.numeric(alteris$edad)\n#alteris$edad <-factor(Recode(alteris$edad ,\"0:18=1;19:29=2;30:40=3;41:51=4;52:62=5;63:100=6\"))\n\n# Sexo \n#sexolab<-c('male','female')\nalteris$sexo <-factor(Recode(alteris$sexo ,\"1=1;2=2\"))\ntable(alteris$sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2 \n3388 4678 \n```\n:::\n\n```{.r .cell-code}\n# Relación\nalteris<-alteris%>%\n  dplyr::mutate(rel=case_when(relacion%in%1:3~\"fam\",\n                              relacion%in%4:5~\"nofam\"))\ntable(alteris$relacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4    5 \n 951 1181 2519 2577  838 \n```\n:::\n\n```{.r .cell-code}\n# Barrio \nalteris$barrio<-factor(Recode(alteris$barrio,\"1=1;2=2\"))\ntable(alteris$barrio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2 \n4271 3788 \n```\n:::\n\n```{.r .cell-code}\n#alteris<-na.omit(alteris)\n```\n:::\n\n\n### Borrar alteris con 5 parámetros con NA\n\n::: {.cell}\n\n```{.r .cell-code}\n# Función para borrar casos con un número determinado de NA's. \n#delete.na <- function(DF, n=0) {\n#  DF[rowSums(is.na(DF)) <= n,]\n#}\n#\n#alteris<-delete.na(alteris, 4) #borro los casos que tienen más de 4 NA.  \n```\n:::\n\n\n### Data Frame Ego’s\n\nCreamos un subset con la data de ego equivalente a la data de los alteris. Las nombramos de la misma manera. \n\n::: {.cell}\n\n```{.r .cell-code}\negos <-a %>%\n       dplyr::select(.egoID, \n                     sexo=m0_sexo, \n                     edad=m0_edad, \n                     educ=m01, \n                     relig=m38, \n                     ideol=c15,\n                     ponderador02,\n                     estrato,\n                     segmento)\n\negos <- as_tibble(egos)\n```\n:::\n\n\n### Recod data Ego's\n\nRecodificamos las variables de la data de ego siguiendo el patrón de la data de alteris. \n\n::: {.cell}\n\n```{.r .cell-code}\n# NA\negos[egos==\"-999\"]<-NA\negos[egos==\"-888\"]<-NA\n\n# Educación\negos$educ <-factor(Recode(egos$educ,\"1:3=1;4:5=2;6:7=3;8:10=4\"))\ntable(egos$educ)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4 \n 597 1045  402  429 \n```\n:::\n\n```{.r .cell-code}\n# Religión\negos$relig<-factor(Recode(egos$relig,\"1=1;2=2;3:6=3;7:9=4\"))\ntable(egos$relig)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4 \n1383  499  276  308 \n```\n:::\n\n```{.r .cell-code}\n# Ideología\n#ideolab2<-c('leftwinger','centerleft','center','centerright','rightwinger','none')\negos$ideol<-factor(Recode(egos$ideol,\"0:2=5;3:4=4;5=3;6:7=2;8:10=1;11:12=6\"))\ntable(egos$ideol)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2    3    4    5    6 \n 252  149  470  209  282 1080 \n```\n:::\n\n```{.r .cell-code}\n# Edad\negos$edad<-as.numeric(egos$edad)\n#egos$edad <-factor(Recode(egos$edad,\"18=1;19:29=2;30:40=3;41:51=4;52:62=5;63:100=6\"))\n\n# Sexo\negos$sexo <-factor(Recode(egos$sexo,\"1=1;2=2\"))\ntable(egos$sexo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2 \n 951 1522 \n```\n:::\n\n```{.r .cell-code}\n# Barrio\negos$barrio <- matrix(rbinom(2473*5,1,0.6),2473,1) # Criterio minimalista\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in matrix(rbinom(2473 * 5, 1, 0.6), 2473, 1): data length differs from\nsize of matrix: [12365 != 2473 x 1]\n```\n:::\n\n```{.r .cell-code}\negos$barrio<-factor(Recode(egos$barrio,\"1=1;0=2\"))\ntable(egos$barrio)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   1    2 \n1437 1036 \n```\n:::\n:::\n\n\n### Crear objeto Egor (requerido para trabajar con función `ergm.ego`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# definir diseño complejo\nelsoc_ego <- egor(alters = alteris, \n                  egos = egos,\n                  alter_design = list(max = 5),\n                  ID.vars = list(\n                    ego = \".egoID\",\n                    alter = \".alterID\")) %>% as.egor()\n\nego_design(elsoc_ego) <- list(weight = \"ponderador02\",\n                              strata = \"estrato\",\n                              cluster=\"segmento\") \n\n# eliminar atributos de diseño\nelsoc_ego[[\"ego\"]][[\"variables\"]][[\"ponderador02\"]]<-NULL\nelsoc_ego[[\"ego\"]][[\"variables\"]][[\"estrato\"]]<-NULL\nelsoc_ego[[\"ego\"]][[\"variables\"]][[\"segmento\"]]<-NULL\n\n# drop NA\nvariables <- c(\"sexo\", \"educ\", \"relig\", \"ideol\", \"barrio\")\nfor (variable in variables) {\n  elsoc_ego[[\"ego\"]] <- elsoc_ego[[\"ego\"]] %>% drop_na({{ variable }})\n  elsoc_ego[[\"alter\"]] <- elsoc_ego[[\"alter\"]] %>% drop_na({{ variable }})\n}\n\nas_tibble(elsoc_ego$alter)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6,849 × 10\n   .altID .egoID  sexo   edad educ  relig ideol barrio relacion rel  \n   <chr>  <chr>   <fct> <dbl> <fct> <fct> <fct> <fct>     <dbl> <chr>\n 1 1      1101011 1        77 2     1     5     1             1 fam  \n 2 6      1101012 1        60 2     1     6     1             1 fam  \n 3 11     1101013 2        54 1     1     6     1             3 fam  \n 4 12     1101013 2        33 2     1     6     1             3 fam  \n 5 16     1101021 1        55 2     1     6     1             4 nofam\n 6 21     1101022 2        44 4     4     6     1             2 fam  \n 7 26     1101023 1        40 2     1     6     1             3 fam  \n 8 31     1101032 2        31 4     1     6     1             2 fam  \n 9 32     1101032 1        57 2     1     5     1             1 fam  \n10 36     1101033 1        37 2     1     2     1             1 fam  \n# ℹ 6,839 more rows\n```\n:::\n:::\n\n\n\n### Degree distribution\n\n#### Educación \n\n::: {.cell}\n\n```{.r .cell-code}\ndegreedist(elsoc_ego, by=\"educ\", prob=T, plot = T, weight=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### Sexo\n\n::: {.cell}\n\n```{.r .cell-code}\ndegreedist(elsoc_ego, by=\"sexo\", prob=T, plot = T, weight=TRUE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Modelos\n\n`nodefactor` = controla el grado de los diferentes grupos (ajustando las estimaciones de homofilia por el hecho de que algunos grupos, por ejemplo, los hombres, tienen más vínculos que otros grupos, como las mujeres). \n\nEl paquete \"ergm\" proporciona no sólo estadísticas resumidas sino también valores-p. Sin embargo, como indica Kolaczyk y Csárdi (2020), la justificación teórica para las distribuciones asintóticas chi-cuadrado y F utilizadas por `ergm` para calcular estos valores no se ha establecido hasta la fecha. Por lo tanto, puede ser pertinente interpretar estos valores de manera informal, como estadísticas resumidas adicionales. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Set # replicates\nreps = 1\n## Set ppop size and construction\nppop = 15000\nppopwt = 'round' # Round gives consistent netsize/composition\nconstraint.formula <- (~ bd(maxout = 5)) # constraint por grado máximo para cada ego. \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(names(elsoc_ego$ego))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"cluster\"    \"strata\"     \"has.strata\" \"prob\"       \"allprob\"   \n[6] \"call\"       \"variables\"  \"fpc\"        \"pps\"       \n```\n:::\n\n```{.r .cell-code}\nprint(names(elsoc_ego$alter))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \".altID\"   \".egoID\"   \"sexo\"     \"edad\"     \"educ\"     \"relig\"   \n [7] \"ideol\"    \"barrio\"   \"relacion\" \"rel\"     \n```\n:::\n:::\n\n\n\n### Modelo 1\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelo1 <- ergm.ego(elsoc_ego ~\n                    #edges + \n                    #degree(1:5) +\n                    nodefactor(\"sexo\", levels = -2) +\n                    nodefactor(\"educ\") +\n                    nodefactor(\"ideol\") +\n                    nodefactor(\"relig\") +\n                    nodematch(\"sexo\", diff=TRUE) +\n                    nodematch(\"educ\", diff=TRUE) +\n                    nodematch(\"ideol\", diff=TRUE)+\n                    nodematch(\"relig\", diff=TRUE)+\n                    absdiff(\"edad\"),\n                # constraints = constraint.formula,\n                 control=control.ergm.ego(ppopsize=5000,\n                                         ppop.wt=ppopwt,\n                                         stats.wt=\"data\",\n                                         stats.est=\"survey\"),\n                   ergm = control.ergm(init.method = \"MPLE\",\n                                       MCMC.burnin = 2e4,\n                                       MCMC.interval = 1e4,\n                                       MCMC.samplesize = 5000,\n                                       parallel = 16,\n                                       SAN.nsteps = 1e6,\n                                       MCMLE.maxit = 20,\n                                       seed = 123),\n                )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nConstructing pseudopopulation network.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: Constructed network has size 4912, different from requested 5000. Estimation should not be meaningfully affected.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nUnable to match target stats. Using MCMLE estimation.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStarting maximum pseudolikelihood estimation (MPLE):\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nObtaining the responsible dyads.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEvaluating the predictor and response matrix.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nMaximizing the pseudolikelihood.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFinished MPLE.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nStarting Monte Carlo maximum likelihood estimation (MCMLE):\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nIteration 1 of at most 60:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOptimizing with step length 0.6837.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe log-likelihood improved by 2.3769.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating equations are not within tolerance region.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nIteration 2 of at most 60:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOptimizing with step length 1.0000.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe log-likelihood improved by 1.3225.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating equations are not within tolerance region.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nIteration 3 of at most 60:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOptimizing with step length 1.0000.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe log-likelihood improved by 0.1730.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nEstimating equations are not within tolerance region.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nIteration 4 of at most 60:\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nOptimizing with step length 1.0000.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe log-likelihood improved by 0.0846.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nConvergence test p-value: 1.0000. Not converged with 99% confidence; increasing sample size.\nIteration 5 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.3541.\nEstimating equations are not within tolerance region.\nIteration 6 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.5360.\nEstimating equations are not within tolerance region.\nEstimating equations did not move closer to tolerance region more than 1 time(s) in 4 steps; increasing sample size.\nIteration 7 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.1198.\nEstimating equations are not within tolerance region.\nIteration 8 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.0667.\nConvergence test p-value: 0.9996. Not converged with 99% confidence; increasing sample size.\nIteration 9 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.1090.\nEstimating equations are not within tolerance region.\nIteration 10 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.1192.\nEstimating equations are not within tolerance region.\nEstimating equations did not move closer to tolerance region more than 1 time(s) in 4 steps; increasing sample size.\nIteration 11 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.0471.\nConvergence test p-value: 0.4100. Not converged with 99% confidence; increasing sample size.\nIteration 12 of at most 60:\nOptimizing with step length 1.0000.\nThe log-likelihood improved by 0.0346.\nConvergence test p-value: 0.0020. Converged with 99% confidence.\nFinished MCMLE.\nThis model was fit using MCMC.  To examine model diagnostics and check\nfor degeneracy, use the mcmc.diagnostics() function.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Argument(s) 'ergm' were not recognized or used. Did you mistype an\nargument name?\n```\n:::\n\n```{.r .cell-code}\n#?control.ergm.ego\n#??ignore.max.alters\n```\n:::\n\n\n\n### Summary\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(modelo1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\nergm.ego(formula = elsoc_ego ~ nodefactor(\"sexo\", levels = -2) + \n    nodefactor(\"educ\") + nodefactor(\"ideol\") + nodefactor(\"relig\") + \n    nodematch(\"sexo\", diff = TRUE) + nodematch(\"educ\", diff = TRUE) + \n    nodematch(\"ideol\", diff = TRUE) + nodematch(\"relig\", diff = TRUE) + \n    absdiff(\"edad\"), control = control.ergm.ego(ppopsize = 5000, \n    ppop.wt = ppopwt, stats.wt = \"data\", stats.est = \"survey\"), \n    ergm = control.ergm(init.method = \"MPLE\", MCMC.burnin = 20000, \n        MCMC.interval = 10000, MCMC.samplesize = 5000, parallel = 16, \n        SAN.nsteps = 1e+06, MCMLE.maxit = 20, seed = 123))\n\nMonte Carlo Maximum Likelihood Results:\n\n                      Estimate Std. Error MCMC % z value Pr(>|z|)    \noffset(netsize.adj) -8.4994365  0.0000000      0    -Inf  < 1e-04 ***\nnodefactor.sexo.1   -0.2885474  0.2388619      0  -1.208 0.227044    \nnodefactor.educ.2    0.3049821  0.0784976      0   3.885 0.000102 ***\nnodefactor.educ.3    0.2704014  0.0979725      0   2.760 0.005781 ** \nnodefactor.educ.4    0.0672247  0.0980471      0   0.686 0.492942    \nnodefactor.ideol.2  -0.0747442  0.1382029      0  -0.541 0.588625    \nnodefactor.ideol.3  -0.1007495  0.1146232      0  -0.879 0.379421    \nnodefactor.ideol.4   0.1267838  0.1354388      0   0.936 0.349223    \nnodefactor.ideol.5   0.0156922  0.1117448      0   0.140 0.888321    \nnodefactor.ideol.6   0.2787322  0.1086339      0   2.566 0.010294 *  \nnodefactor.relig.2  -0.4745734  0.1176390      0  -4.034  < 1e-04 ***\nnodefactor.relig.3   0.0263535  0.1293003      0   0.204 0.838497    \nnodefactor.relig.4   0.2673704  0.1065402      0   2.510 0.012088 *  \nnodematch.sexo.1     0.6639366  0.2428196      0   2.734 0.006252 ** \nnodematch.sexo.2     0.2079429  0.2412359      0   0.862 0.388693    \nnodematch.educ.1     0.8357836  0.1301471      0   6.422  < 1e-04 ***\nnodematch.educ.2     0.3752702  0.1055680      0   3.555 0.000378 ***\nnodematch.educ.3     0.6975375  0.1330534      0   5.243  < 1e-04 ***\nnodematch.educ.4     1.6478958  0.1327725      0  12.411  < 1e-04 ***\nnodematch.ideol.1    1.7033774  0.2036293      0   8.365  < 1e-04 ***\nnodematch.ideol.2    1.0841183  0.3355293      0   3.231 0.001233 ** \nnodematch.ideol.3   -0.0003412  0.2294421      0  -0.001 0.998813    \nnodematch.ideol.4    0.3014313  0.2783215      0   1.083 0.278794    \nnodematch.ideol.5    1.5431064  0.2066599      0   7.467  < 1e-04 ***\nnodematch.ideol.6    0.5745488  0.1326972      0   4.330  < 1e-04 ***\nnodematch.relig.1    0.8679198  0.1370340      0   6.334  < 1e-04 ***\nnodematch.relig.2    2.4035463  0.1652878      0  14.542  < 1e-04 ***\nnodematch.relig.3    0.7822271  0.2575841      0   3.037 0.002391 ** \nnodematch.relig.4    0.7131643  0.1566308      0   4.553  < 1e-04 ***\nabsdiff.edad        -0.0295657  0.0022174      0 -13.334  < 1e-04 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n The following terms are fixed by offset and are not estimated:\n  offset(netsize.adj) \n```\n:::\n:::\n\n\n\nPara interpretar los coeficientes, es útil pensar en términos de la probabilidad de que un par dado de nodos tenga un vínculo, condicionada al estado del nodo entre todos los demás pares. Para el término de homofilia de género (segundo orden) en el modelo anterio: El empate entre dos nodos mujeres, casi cuatriplica las probabilidades (odds) de tener un vínculo en la red observada (por su puesto, manteniendo todo lo demás igual). \n\nVale indicar también que para todas las variables el coeficiente difiere de cero en al menos un error estándar, lo que sugiere algún efecto no trivial de estas variables en la formación de vínculos en la red.\n\n\n### Bondad de ajuste\n\nLa práctica actual para evaluar la bondad de ajuste en modelos ERGM es simular primero numerosos gráficos aleatorios del modelo ajustado y luego comparar varios resúmenes de estos gráficos con los del gráfico observado originalmente. Si las características de los grafos de red observados no coinciden con los valores típicos que surgen de las realizaciones del modelo de gráfico aleatorio ajustado, esto sugiere diferencias sistemáticas entre la clase especificada de modelos y los datos y, por lo tanto, una falta de bondad. \n\nEn general, al evaluar la bondad de ajuste en el modelado de redes, los resúmenes de uso común incluyen la distribución de cualquier número de los diversos resúmenes de la estructura de la red: como el grado, la centralidad y la distancia geodésica. Con los ERGMs, sin embargo, una elección natural de resumen son las propias estadísticas $g$ que definen el ERGM (es decir, las llamadas estadísticas suficientes). Para evaluar la bondad de ajuste de nuestro modelo anterior de homofilia, la función `ergm` ejecuta las simulaciones de Monte Carlo necesarias y calcula las comparaciones con la red original en términos de las distribuciones de cada uno de los estadísticos en el modelo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(gof(modelo1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nConsiderando las características particulares capturadas por las estadísticas, el ajuste del modelo es bastante bueno en general, toda vez que las estadísticas observadas están bastante cerca de la mediana de los valores simulados en la mayoría de los casos. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(gof(modelo1, GOF=\"degree\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n### MCMC\n\n::: {.cell}\n\n```{.r .cell-code}\nmcmc.diagnostics(modelo1, which = \"plots\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-6.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-7.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-8.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-9.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-10.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nNote: To save space, only one in every 2 iterations of the MCMC sample\n  used for estimation was stored for diagnostics. Sample size per chain\n  was originally around 5904 with thinning interval 16384.\n\nNote: MCMC diagnostics shown here are from the last round of\n  simulation, prior to computation of final parameter estimates.\n  Because the final estimates are refinements of those used for this\n  simulation run, these diagnostics may understate model performance.\n  To directly assess the performance of the final model on in-model\n  statistics, please use the GOF command: gof(ergmFitObject,\n  GOF=~model).\n```\n:::\n:::\n\n\n### simulate\n\n::: {.cell}\n\n```{.r .cell-code}\nsim.modelo1 <- simulate(modelo1, popsize=500,\n                       control=control.simulate.ergm.ego(\n                       simulate=control.simulate.formula(MCMC.burnin=2e6)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: Constructed network has size 244 different from requested 500. Simulated statistics may need to be rescaled.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sim.modelo1, vertex.col=\"educ\")\nlegend('bottomleft',fill=1:4,legend=paste('Eduación',1:4),cex=0.75)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n### Tidy\n\n::: {.cell}\n\n```{.r .cell-code}\nbroom::tidy(modelo1, exponentiate = TRUE, conf.int = TRUE, conf.level = 0.99)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tidy.ergm(modelo1, exponentiate = TRUE, conf.int = TRUE, conf.level\n= 0.99): Exponentiating but model didn't use log or logit link.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 8\n   term       estimate std.error mcmc.error statistic p.value conf.low conf.high\n   <chr>         <dbl>     <dbl>      <dbl>     <dbl>   <dbl>    <dbl>     <dbl>\n 1 offset(ne… 0.000204    0               0  -Inf     0       0.000204  0.000204\n 2 nodefacto… 0.749       0.239           0    -1.21  2.27e-1 0.405     1.39    \n 3 nodefacto… 1.36        0.0785          0     3.89  1.02e-4 1.11      1.66    \n 4 nodefacto… 1.31        0.0980          0     2.76  5.78e-3 1.02      1.69    \n 5 nodefacto… 1.07        0.0980          0     0.686 4.93e-1 0.831     1.38    \n 6 nodefacto… 0.928       0.138           0    -0.541 5.89e-1 0.650     1.32    \n 7 nodefacto… 0.904       0.115           0    -0.879 3.79e-1 0.673     1.21    \n 8 nodefacto… 1.14        0.135           0     0.936 3.49e-1 0.801     1.61    \n 9 nodefacto… 1.02        0.112           0     0.140 8.88e-1 0.762     1.35    \n10 nodefacto… 1.32        0.109           0     2.57  1.03e-2 0.999     1.75    \n# ℹ 20 more rows\n```\n:::\n:::\n\n\n### Predict\n\n::: {.cell}\n\n```{.r .cell-code}\n#predict(modelo1, type = \"response\")\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}